*template.txt*        For Neovim >= 0.8.0       Last change: 2024 September 25

==============================================================================
Table of Contents                                 *template-table-of-contents*

  - Features                                               |template-features|
  - Setup                                                     |template-setup|
  - Usage                                                     |template-usage|
  - What’s Next                                     |template-what’s-next|
  - Behind The Code                                 |template-behind-the-code|

template.nvim is a neovim plugin that allows neovim users to `<action>`.


FEATURES                                                   *template-features*

- Includes a ready to go neovim plugin template
- Comes with a lint and test CI action
- Includes a Github action to auto generate vimdocs
- Comes with a ready to go README template
- Works with mkrepo <https://github.com/2kabhishek/mkrepo>


SETUP                                                         *template-setup*


REQUIREMENTS ~

- Latest version of `neovim`


INSTALLATION ~

>lua
    -- Lazy
    {
        '2kabhishek/template.nvim',
        dependencies = {
            'nvim-lua/plenary.nvim'
        },
        cmd = 'TemplateHello',
    },
    
    -- Packer
    use '2kabhishek/template.nvim'
<


USAGE                                                         *template-usage*

1. Fork the `template.nvim` repo


2. Update the plugin name, file names etc, change `template` to `your-plugin-name`


3. Add the code required for your plugin,

- Main logic, config options for the plugin code goes into lua/template <./lua/template.lua>
- Supporting code goes into lua/modules <./lua/template/> if needed
- For adding commands and keybindngs use plugin/template <./plugin/template.lua>


4. Add test code to the tests <./tests/template> directory


5. Update the README


6. Tweak the docs action <./.github/workflows/docs.yml> file to reflect your
username, commit message and plugin name

- Generating vimdocs needs write access to actions (repo settings > actions > general > workflow permissions)




CONFIGURATION ~

template.nvim can be configured using the following options:

>lua
    template.setup({
        name = 'template.nvim', -- Name to be greeted, 'World' by default
    })
<


COMMANDS ~

`template.nvim` adds the following commands:

- `TemplateHello`Shows a hello message with the confugred name.


KEYBINDINGS ~

It is recommended to use:

- `<leader>th,` for `TemplateHello`


  NOTE: By default there are no configured keybindings.

HELP ~

Run `:help nerdy` for more details.


WHAT’S NEXT                                         *template-what’s-next*

Planning to add `<feature/module>`.


TO-DO ~

- Setup repo
- Think real hard
- Start typing


BEHIND THE CODE                                     *template-behind-the-code*


INSPIRATION ~

template.nvim was inspired by nvim-plugin-template
<https://github.com/ellisonleao/nvim-plugin-template>, I added some changes on
top to make setting up a new plugin faster.


CHALLENGES/LEARNINGS ~

- The main challenges were `<issue/difficulty>`
- I learned about `<learning/accomplishment>`


TOOLING ~

- dots2k <https://github.com/2kabhishek/dots2k> — Dev Environment
- nvim2k <https://github.com/2kabhishek/nvim2k> — Personalized Editor
- sway2k <https://github.com/2kabhishek/sway2k> — Desktop Environment
- qute2k <https://github.com/2kabhishek/qute2k> — Personalized Browser


MORE INFO ~

- nerdy.nvim <https://github.com/2kabhishek/nerdy.nevim> — Find nerd glyphs easily
- tdo.nvim <https://github.com/2KAbhishek/tdo.nvim> — Fast and simple notes in Neovim
- termim.nvim <https://github.com/2kabhishek/termim,nvim> — Neovim terminal improved


Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
